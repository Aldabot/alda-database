// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  saltedgeAccount: (where?: SaltedgeAccountWhereInput) => Promise<boolean>;
  saltedgeCustomer: (where?: SaltedgeCustomerWhereInput) => Promise<boolean>;
  saltedgeLogin: (where?: SaltedgeLoginWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  saltedgeAccount: (
    where: SaltedgeAccountWhereUniqueInput
  ) => SaltedgeAccountPromise;
  saltedgeAccounts: (args?: {
    where?: SaltedgeAccountWhereInput;
    orderBy?: SaltedgeAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SaltedgeAccount>;
  saltedgeAccountsConnection: (args?: {
    where?: SaltedgeAccountWhereInput;
    orderBy?: SaltedgeAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SaltedgeAccountConnectionPromise;
  saltedgeCustomer: (
    where: SaltedgeCustomerWhereUniqueInput
  ) => SaltedgeCustomerPromise;
  saltedgeCustomers: (args?: {
    where?: SaltedgeCustomerWhereInput;
    orderBy?: SaltedgeCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SaltedgeCustomer>;
  saltedgeCustomersConnection: (args?: {
    where?: SaltedgeCustomerWhereInput;
    orderBy?: SaltedgeCustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SaltedgeCustomerConnectionPromise;
  saltedgeLogin: (where: SaltedgeLoginWhereUniqueInput) => SaltedgeLoginPromise;
  saltedgeLogins: (args?: {
    where?: SaltedgeLoginWhereInput;
    orderBy?: SaltedgeLoginOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SaltedgeLogin>;
  saltedgeLoginsConnection: (args?: {
    where?: SaltedgeLoginWhereInput;
    orderBy?: SaltedgeLoginOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SaltedgeLoginConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSaltedgeAccount: (
    data: SaltedgeAccountCreateInput
  ) => SaltedgeAccountPromise;
  updateSaltedgeAccount: (args: {
    data: SaltedgeAccountUpdateInput;
    where: SaltedgeAccountWhereUniqueInput;
  }) => SaltedgeAccountPromise;
  updateManySaltedgeAccounts: (args: {
    data: SaltedgeAccountUpdateManyMutationInput;
    where?: SaltedgeAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertSaltedgeAccount: (args: {
    where: SaltedgeAccountWhereUniqueInput;
    create: SaltedgeAccountCreateInput;
    update: SaltedgeAccountUpdateInput;
  }) => SaltedgeAccountPromise;
  deleteSaltedgeAccount: (
    where: SaltedgeAccountWhereUniqueInput
  ) => SaltedgeAccountPromise;
  deleteManySaltedgeAccounts: (
    where?: SaltedgeAccountWhereInput
  ) => BatchPayloadPromise;
  createSaltedgeCustomer: (
    data: SaltedgeCustomerCreateInput
  ) => SaltedgeCustomerPromise;
  updateSaltedgeCustomer: (args: {
    data: SaltedgeCustomerUpdateInput;
    where: SaltedgeCustomerWhereUniqueInput;
  }) => SaltedgeCustomerPromise;
  updateManySaltedgeCustomers: (args: {
    data: SaltedgeCustomerUpdateManyMutationInput;
    where?: SaltedgeCustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertSaltedgeCustomer: (args: {
    where: SaltedgeCustomerWhereUniqueInput;
    create: SaltedgeCustomerCreateInput;
    update: SaltedgeCustomerUpdateInput;
  }) => SaltedgeCustomerPromise;
  deleteSaltedgeCustomer: (
    where: SaltedgeCustomerWhereUniqueInput
  ) => SaltedgeCustomerPromise;
  deleteManySaltedgeCustomers: (
    where?: SaltedgeCustomerWhereInput
  ) => BatchPayloadPromise;
  createSaltedgeLogin: (data: SaltedgeLoginCreateInput) => SaltedgeLoginPromise;
  updateSaltedgeLogin: (args: {
    data: SaltedgeLoginUpdateInput;
    where: SaltedgeLoginWhereUniqueInput;
  }) => SaltedgeLoginPromise;
  updateManySaltedgeLogins: (args: {
    data: SaltedgeLoginUpdateManyMutationInput;
    where?: SaltedgeLoginWhereInput;
  }) => BatchPayloadPromise;
  upsertSaltedgeLogin: (args: {
    where: SaltedgeLoginWhereUniqueInput;
    create: SaltedgeLoginCreateInput;
    update: SaltedgeLoginUpdateInput;
  }) => SaltedgeLoginPromise;
  deleteSaltedgeLogin: (
    where: SaltedgeLoginWhereUniqueInput
  ) => SaltedgeLoginPromise;
  deleteManySaltedgeLogins: (
    where?: SaltedgeLoginWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  saltedgeAccount: (
    where?: SaltedgeAccountSubscriptionWhereInput
  ) => SaltedgeAccountSubscriptionPayloadSubscription;
  saltedgeCustomer: (
    where?: SaltedgeCustomerSubscriptionWhereInput
  ) => SaltedgeCustomerSubscriptionPayloadSubscription;
  saltedgeLogin: (
    where?: SaltedgeLoginSubscriptionWhereInput
  ) => SaltedgeLoginSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SaltedgeAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "accountId_ASC"
  | "accountId_DESC"
  | "balance_ASC"
  | "balance_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SaltedgeLoginOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "loginId_ASC"
  | "loginId_DESC"
  | "provider_ASC"
  | "provider_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SaltedgeCustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "customerId_ASC"
  | "customerId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "psid_ASC"
  | "psid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SaltedgeAccountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  accountId?: String;
}>;

export interface SaltedgeAccountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  accountId?: String;
  accountId_not?: String;
  accountId_in?: String[] | String;
  accountId_not_in?: String[] | String;
  accountId_lt?: String;
  accountId_lte?: String;
  accountId_gt?: String;
  accountId_gte?: String;
  accountId_contains?: String;
  accountId_not_contains?: String;
  accountId_starts_with?: String;
  accountId_not_starts_with?: String;
  accountId_ends_with?: String;
  accountId_not_ends_with?: String;
  balance?: Float;
  balance_not?: Float;
  balance_in?: Float[] | Float;
  balance_not_in?: Float[] | Float;
  balance_lt?: Float;
  balance_lte?: Float;
  balance_gt?: Float;
  balance_gte?: Float;
  AND?: SaltedgeAccountWhereInput[] | SaltedgeAccountWhereInput;
  OR?: SaltedgeAccountWhereInput[] | SaltedgeAccountWhereInput;
  NOT?: SaltedgeAccountWhereInput[] | SaltedgeAccountWhereInput;
}

export type SaltedgeCustomerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  customerId?: String;
}>;

export interface SaltedgeLoginWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  loginId?: String;
  loginId_not?: String;
  loginId_in?: String[] | String;
  loginId_not_in?: String[] | String;
  loginId_lt?: String;
  loginId_lte?: String;
  loginId_gt?: String;
  loginId_gte?: String;
  loginId_contains?: String;
  loginId_not_contains?: String;
  loginId_starts_with?: String;
  loginId_not_starts_with?: String;
  loginId_ends_with?: String;
  loginId_not_ends_with?: String;
  saltedgeCustomer?: SaltedgeCustomerWhereInput;
  provider?: String;
  provider_not?: String;
  provider_in?: String[] | String;
  provider_not_in?: String[] | String;
  provider_lt?: String;
  provider_lte?: String;
  provider_gt?: String;
  provider_gte?: String;
  provider_contains?: String;
  provider_not_contains?: String;
  provider_starts_with?: String;
  provider_not_starts_with?: String;
  provider_ends_with?: String;
  provider_not_ends_with?: String;
  accounts_every?: SaltedgeAccountWhereInput;
  accounts_some?: SaltedgeAccountWhereInput;
  accounts_none?: SaltedgeAccountWhereInput;
  AND?: SaltedgeLoginWhereInput[] | SaltedgeLoginWhereInput;
  OR?: SaltedgeLoginWhereInput[] | SaltedgeLoginWhereInput;
  NOT?: SaltedgeLoginWhereInput[] | SaltedgeLoginWhereInput;
}

export interface SaltedgeCustomerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  customerId?: String;
  customerId_not?: String;
  customerId_in?: String[] | String;
  customerId_not_in?: String[] | String;
  customerId_lt?: String;
  customerId_lte?: String;
  customerId_gt?: String;
  customerId_gte?: String;
  customerId_contains?: String;
  customerId_not_contains?: String;
  customerId_starts_with?: String;
  customerId_not_starts_with?: String;
  customerId_ends_with?: String;
  customerId_not_ends_with?: String;
  user?: UserWhereInput;
  logins_every?: SaltedgeLoginWhereInput;
  logins_some?: SaltedgeLoginWhereInput;
  logins_none?: SaltedgeLoginWhereInput;
  AND?: SaltedgeCustomerWhereInput[] | SaltedgeCustomerWhereInput;
  OR?: SaltedgeCustomerWhereInput[] | SaltedgeCustomerWhereInput;
  NOT?: SaltedgeCustomerWhereInput[] | SaltedgeCustomerWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  psid?: String;
  psid_not?: String;
  psid_in?: String[] | String;
  psid_not_in?: String[] | String;
  psid_lt?: String;
  psid_lte?: String;
  psid_gt?: String;
  psid_gte?: String;
  psid_contains?: String;
  psid_not_contains?: String;
  psid_starts_with?: String;
  psid_not_starts_with?: String;
  psid_ends_with?: String;
  psid_not_ends_with?: String;
  saltedgeCustomer?: SaltedgeCustomerWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type SaltedgeLoginWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  loginId?: String;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  psid?: String;
}>;

export interface SaltedgeAccountCreateInput {
  accountId: String;
  balance?: Float;
}

export interface SaltedgeAccountUpdateInput {
  accountId?: String;
  balance?: Float;
}

export interface SaltedgeAccountUpdateManyMutationInput {
  accountId?: String;
  balance?: Float;
}

export interface SaltedgeCustomerCreateInput {
  customerId: String;
  user: UserCreateOneWithoutSaltedgeCustomerInput;
  logins?: SaltedgeLoginCreateManyWithoutSaltedgeCustomerInput;
}

export interface UserCreateOneWithoutSaltedgeCustomerInput {
  create?: UserCreateWithoutSaltedgeCustomerInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutSaltedgeCustomerInput {
  psid: String;
}

export interface SaltedgeLoginCreateManyWithoutSaltedgeCustomerInput {
  create?:
    | SaltedgeLoginCreateWithoutSaltedgeCustomerInput[]
    | SaltedgeLoginCreateWithoutSaltedgeCustomerInput;
  connect?: SaltedgeLoginWhereUniqueInput[] | SaltedgeLoginWhereUniqueInput;
}

export interface SaltedgeLoginCreateWithoutSaltedgeCustomerInput {
  loginId: String;
  provider: String;
  accounts?: SaltedgeAccountCreateManyInput;
}

export interface SaltedgeAccountCreateManyInput {
  create?: SaltedgeAccountCreateInput[] | SaltedgeAccountCreateInput;
  connect?: SaltedgeAccountWhereUniqueInput[] | SaltedgeAccountWhereUniqueInput;
}

export interface SaltedgeCustomerUpdateInput {
  customerId?: String;
  user?: UserUpdateOneRequiredWithoutSaltedgeCustomerInput;
  logins?: SaltedgeLoginUpdateManyWithoutSaltedgeCustomerInput;
}

export interface UserUpdateOneRequiredWithoutSaltedgeCustomerInput {
  create?: UserCreateWithoutSaltedgeCustomerInput;
  update?: UserUpdateWithoutSaltedgeCustomerDataInput;
  upsert?: UserUpsertWithoutSaltedgeCustomerInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutSaltedgeCustomerDataInput {
  psid?: String;
}

export interface UserUpsertWithoutSaltedgeCustomerInput {
  update: UserUpdateWithoutSaltedgeCustomerDataInput;
  create: UserCreateWithoutSaltedgeCustomerInput;
}

export interface SaltedgeLoginUpdateManyWithoutSaltedgeCustomerInput {
  create?:
    | SaltedgeLoginCreateWithoutSaltedgeCustomerInput[]
    | SaltedgeLoginCreateWithoutSaltedgeCustomerInput;
  delete?: SaltedgeLoginWhereUniqueInput[] | SaltedgeLoginWhereUniqueInput;
  connect?: SaltedgeLoginWhereUniqueInput[] | SaltedgeLoginWhereUniqueInput;
  set?: SaltedgeLoginWhereUniqueInput[] | SaltedgeLoginWhereUniqueInput;
  disconnect?: SaltedgeLoginWhereUniqueInput[] | SaltedgeLoginWhereUniqueInput;
  update?:
    | SaltedgeLoginUpdateWithWhereUniqueWithoutSaltedgeCustomerInput[]
    | SaltedgeLoginUpdateWithWhereUniqueWithoutSaltedgeCustomerInput;
  upsert?:
    | SaltedgeLoginUpsertWithWhereUniqueWithoutSaltedgeCustomerInput[]
    | SaltedgeLoginUpsertWithWhereUniqueWithoutSaltedgeCustomerInput;
  deleteMany?: SaltedgeLoginScalarWhereInput[] | SaltedgeLoginScalarWhereInput;
  updateMany?:
    | SaltedgeLoginUpdateManyWithWhereNestedInput[]
    | SaltedgeLoginUpdateManyWithWhereNestedInput;
}

export interface SaltedgeLoginUpdateWithWhereUniqueWithoutSaltedgeCustomerInput {
  where: SaltedgeLoginWhereUniqueInput;
  data: SaltedgeLoginUpdateWithoutSaltedgeCustomerDataInput;
}

export interface SaltedgeLoginUpdateWithoutSaltedgeCustomerDataInput {
  loginId?: String;
  provider?: String;
  accounts?: SaltedgeAccountUpdateManyInput;
}

export interface SaltedgeAccountUpdateManyInput {
  create?: SaltedgeAccountCreateInput[] | SaltedgeAccountCreateInput;
  update?:
    | SaltedgeAccountUpdateWithWhereUniqueNestedInput[]
    | SaltedgeAccountUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SaltedgeAccountUpsertWithWhereUniqueNestedInput[]
    | SaltedgeAccountUpsertWithWhereUniqueNestedInput;
  delete?: SaltedgeAccountWhereUniqueInput[] | SaltedgeAccountWhereUniqueInput;
  connect?: SaltedgeAccountWhereUniqueInput[] | SaltedgeAccountWhereUniqueInput;
  set?: SaltedgeAccountWhereUniqueInput[] | SaltedgeAccountWhereUniqueInput;
  disconnect?:
    | SaltedgeAccountWhereUniqueInput[]
    | SaltedgeAccountWhereUniqueInput;
  deleteMany?:
    | SaltedgeAccountScalarWhereInput[]
    | SaltedgeAccountScalarWhereInput;
  updateMany?:
    | SaltedgeAccountUpdateManyWithWhereNestedInput[]
    | SaltedgeAccountUpdateManyWithWhereNestedInput;
}

export interface SaltedgeAccountUpdateWithWhereUniqueNestedInput {
  where: SaltedgeAccountWhereUniqueInput;
  data: SaltedgeAccountUpdateDataInput;
}

export interface SaltedgeAccountUpdateDataInput {
  accountId?: String;
  balance?: Float;
}

export interface SaltedgeAccountUpsertWithWhereUniqueNestedInput {
  where: SaltedgeAccountWhereUniqueInput;
  update: SaltedgeAccountUpdateDataInput;
  create: SaltedgeAccountCreateInput;
}

export interface SaltedgeAccountScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  accountId?: String;
  accountId_not?: String;
  accountId_in?: String[] | String;
  accountId_not_in?: String[] | String;
  accountId_lt?: String;
  accountId_lte?: String;
  accountId_gt?: String;
  accountId_gte?: String;
  accountId_contains?: String;
  accountId_not_contains?: String;
  accountId_starts_with?: String;
  accountId_not_starts_with?: String;
  accountId_ends_with?: String;
  accountId_not_ends_with?: String;
  balance?: Float;
  balance_not?: Float;
  balance_in?: Float[] | Float;
  balance_not_in?: Float[] | Float;
  balance_lt?: Float;
  balance_lte?: Float;
  balance_gt?: Float;
  balance_gte?: Float;
  AND?: SaltedgeAccountScalarWhereInput[] | SaltedgeAccountScalarWhereInput;
  OR?: SaltedgeAccountScalarWhereInput[] | SaltedgeAccountScalarWhereInput;
  NOT?: SaltedgeAccountScalarWhereInput[] | SaltedgeAccountScalarWhereInput;
}

export interface SaltedgeAccountUpdateManyWithWhereNestedInput {
  where: SaltedgeAccountScalarWhereInput;
  data: SaltedgeAccountUpdateManyDataInput;
}

export interface SaltedgeAccountUpdateManyDataInput {
  accountId?: String;
  balance?: Float;
}

export interface SaltedgeLoginUpsertWithWhereUniqueWithoutSaltedgeCustomerInput {
  where: SaltedgeLoginWhereUniqueInput;
  update: SaltedgeLoginUpdateWithoutSaltedgeCustomerDataInput;
  create: SaltedgeLoginCreateWithoutSaltedgeCustomerInput;
}

export interface SaltedgeLoginScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  loginId?: String;
  loginId_not?: String;
  loginId_in?: String[] | String;
  loginId_not_in?: String[] | String;
  loginId_lt?: String;
  loginId_lte?: String;
  loginId_gt?: String;
  loginId_gte?: String;
  loginId_contains?: String;
  loginId_not_contains?: String;
  loginId_starts_with?: String;
  loginId_not_starts_with?: String;
  loginId_ends_with?: String;
  loginId_not_ends_with?: String;
  provider?: String;
  provider_not?: String;
  provider_in?: String[] | String;
  provider_not_in?: String[] | String;
  provider_lt?: String;
  provider_lte?: String;
  provider_gt?: String;
  provider_gte?: String;
  provider_contains?: String;
  provider_not_contains?: String;
  provider_starts_with?: String;
  provider_not_starts_with?: String;
  provider_ends_with?: String;
  provider_not_ends_with?: String;
  AND?: SaltedgeLoginScalarWhereInput[] | SaltedgeLoginScalarWhereInput;
  OR?: SaltedgeLoginScalarWhereInput[] | SaltedgeLoginScalarWhereInput;
  NOT?: SaltedgeLoginScalarWhereInput[] | SaltedgeLoginScalarWhereInput;
}

export interface SaltedgeLoginUpdateManyWithWhereNestedInput {
  where: SaltedgeLoginScalarWhereInput;
  data: SaltedgeLoginUpdateManyDataInput;
}

export interface SaltedgeLoginUpdateManyDataInput {
  loginId?: String;
  provider?: String;
}

export interface SaltedgeCustomerUpdateManyMutationInput {
  customerId?: String;
}

export interface SaltedgeLoginCreateInput {
  loginId: String;
  saltedgeCustomer: SaltedgeCustomerCreateOneWithoutLoginsInput;
  provider: String;
  accounts?: SaltedgeAccountCreateManyInput;
}

export interface SaltedgeCustomerCreateOneWithoutLoginsInput {
  create?: SaltedgeCustomerCreateWithoutLoginsInput;
  connect?: SaltedgeCustomerWhereUniqueInput;
}

export interface SaltedgeCustomerCreateWithoutLoginsInput {
  customerId: String;
  user: UserCreateOneWithoutSaltedgeCustomerInput;
}

export interface SaltedgeLoginUpdateInput {
  loginId?: String;
  saltedgeCustomer?: SaltedgeCustomerUpdateOneRequiredWithoutLoginsInput;
  provider?: String;
  accounts?: SaltedgeAccountUpdateManyInput;
}

export interface SaltedgeCustomerUpdateOneRequiredWithoutLoginsInput {
  create?: SaltedgeCustomerCreateWithoutLoginsInput;
  update?: SaltedgeCustomerUpdateWithoutLoginsDataInput;
  upsert?: SaltedgeCustomerUpsertWithoutLoginsInput;
  connect?: SaltedgeCustomerWhereUniqueInput;
}

export interface SaltedgeCustomerUpdateWithoutLoginsDataInput {
  customerId?: String;
  user?: UserUpdateOneRequiredWithoutSaltedgeCustomerInput;
}

export interface SaltedgeCustomerUpsertWithoutLoginsInput {
  update: SaltedgeCustomerUpdateWithoutLoginsDataInput;
  create: SaltedgeCustomerCreateWithoutLoginsInput;
}

export interface SaltedgeLoginUpdateManyMutationInput {
  loginId?: String;
  provider?: String;
}

export interface UserCreateInput {
  psid: String;
  saltedgeCustomer?: SaltedgeCustomerCreateOneWithoutUserInput;
}

export interface SaltedgeCustomerCreateOneWithoutUserInput {
  create?: SaltedgeCustomerCreateWithoutUserInput;
  connect?: SaltedgeCustomerWhereUniqueInput;
}

export interface SaltedgeCustomerCreateWithoutUserInput {
  customerId: String;
  logins?: SaltedgeLoginCreateManyWithoutSaltedgeCustomerInput;
}

export interface UserUpdateInput {
  psid?: String;
  saltedgeCustomer?: SaltedgeCustomerUpdateOneWithoutUserInput;
}

export interface SaltedgeCustomerUpdateOneWithoutUserInput {
  create?: SaltedgeCustomerCreateWithoutUserInput;
  update?: SaltedgeCustomerUpdateWithoutUserDataInput;
  upsert?: SaltedgeCustomerUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SaltedgeCustomerWhereUniqueInput;
}

export interface SaltedgeCustomerUpdateWithoutUserDataInput {
  customerId?: String;
  logins?: SaltedgeLoginUpdateManyWithoutSaltedgeCustomerInput;
}

export interface SaltedgeCustomerUpsertWithoutUserInput {
  update: SaltedgeCustomerUpdateWithoutUserDataInput;
  create: SaltedgeCustomerCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  psid?: String;
}

export interface SaltedgeAccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SaltedgeAccountWhereInput;
  AND?:
    | SaltedgeAccountSubscriptionWhereInput[]
    | SaltedgeAccountSubscriptionWhereInput;
  OR?:
    | SaltedgeAccountSubscriptionWhereInput[]
    | SaltedgeAccountSubscriptionWhereInput;
  NOT?:
    | SaltedgeAccountSubscriptionWhereInput[]
    | SaltedgeAccountSubscriptionWhereInput;
}

export interface SaltedgeCustomerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SaltedgeCustomerWhereInput;
  AND?:
    | SaltedgeCustomerSubscriptionWhereInput[]
    | SaltedgeCustomerSubscriptionWhereInput;
  OR?:
    | SaltedgeCustomerSubscriptionWhereInput[]
    | SaltedgeCustomerSubscriptionWhereInput;
  NOT?:
    | SaltedgeCustomerSubscriptionWhereInput[]
    | SaltedgeCustomerSubscriptionWhereInput;
}

export interface SaltedgeLoginSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SaltedgeLoginWhereInput;
  AND?:
    | SaltedgeLoginSubscriptionWhereInput[]
    | SaltedgeLoginSubscriptionWhereInput;
  OR?:
    | SaltedgeLoginSubscriptionWhereInput[]
    | SaltedgeLoginSubscriptionWhereInput;
  NOT?:
    | SaltedgeLoginSubscriptionWhereInput[]
    | SaltedgeLoginSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SaltedgeAccount {
  id: ID_Output;
  accountId: String;
  balance?: Float;
}

export interface SaltedgeAccountPromise
  extends Promise<SaltedgeAccount>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountId: () => Promise<String>;
  balance: () => Promise<Float>;
}

export interface SaltedgeAccountSubscription
  extends Promise<AsyncIterator<SaltedgeAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  accountId: () => Promise<AsyncIterator<String>>;
  balance: () => Promise<AsyncIterator<Float>>;
}

export interface SaltedgeAccountConnection {
  pageInfo: PageInfo;
  edges: SaltedgeAccountEdge[];
}

export interface SaltedgeAccountConnectionPromise
  extends Promise<SaltedgeAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaltedgeAccountEdge>>() => T;
  aggregate: <T = AggregateSaltedgeAccountPromise>() => T;
}

export interface SaltedgeAccountConnectionSubscription
  extends Promise<AsyncIterator<SaltedgeAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaltedgeAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaltedgeAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SaltedgeAccountEdge {
  node: SaltedgeAccount;
  cursor: String;
}

export interface SaltedgeAccountEdgePromise
  extends Promise<SaltedgeAccountEdge>,
    Fragmentable {
  node: <T = SaltedgeAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaltedgeAccountEdgeSubscription
  extends Promise<AsyncIterator<SaltedgeAccountEdge>>,
    Fragmentable {
  node: <T = SaltedgeAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaltedgeAccount {
  count: Int;
}

export interface AggregateSaltedgeAccountPromise
  extends Promise<AggregateSaltedgeAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaltedgeAccountSubscription
  extends Promise<AsyncIterator<AggregateSaltedgeAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SaltedgeCustomer {
  id: ID_Output;
  customerId: String;
}

export interface SaltedgeCustomerPromise
  extends Promise<SaltedgeCustomer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customerId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  logins: <T = FragmentableArray<SaltedgeLogin>>(args?: {
    where?: SaltedgeLoginWhereInput;
    orderBy?: SaltedgeLoginOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SaltedgeCustomerSubscription
  extends Promise<AsyncIterator<SaltedgeCustomer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customerId: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  logins: <T = Promise<AsyncIterator<SaltedgeLoginSubscription>>>(args?: {
    where?: SaltedgeLoginWhereInput;
    orderBy?: SaltedgeLoginOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  psid: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  psid: () => Promise<String>;
  saltedgeCustomer: <T = SaltedgeCustomerPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  psid: () => Promise<AsyncIterator<String>>;
  saltedgeCustomer: <T = SaltedgeCustomerSubscription>() => T;
}

export interface SaltedgeLogin {
  id: ID_Output;
  loginId: String;
  provider: String;
}

export interface SaltedgeLoginPromise
  extends Promise<SaltedgeLogin>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  loginId: () => Promise<String>;
  saltedgeCustomer: <T = SaltedgeCustomerPromise>() => T;
  provider: () => Promise<String>;
  accounts: <T = FragmentableArray<SaltedgeAccount>>(args?: {
    where?: SaltedgeAccountWhereInput;
    orderBy?: SaltedgeAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SaltedgeLoginSubscription
  extends Promise<AsyncIterator<SaltedgeLogin>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  loginId: () => Promise<AsyncIterator<String>>;
  saltedgeCustomer: <T = SaltedgeCustomerSubscription>() => T;
  provider: () => Promise<AsyncIterator<String>>;
  accounts: <T = Promise<AsyncIterator<SaltedgeAccountSubscription>>>(args?: {
    where?: SaltedgeAccountWhereInput;
    orderBy?: SaltedgeAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SaltedgeCustomerConnection {
  pageInfo: PageInfo;
  edges: SaltedgeCustomerEdge[];
}

export interface SaltedgeCustomerConnectionPromise
  extends Promise<SaltedgeCustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaltedgeCustomerEdge>>() => T;
  aggregate: <T = AggregateSaltedgeCustomerPromise>() => T;
}

export interface SaltedgeCustomerConnectionSubscription
  extends Promise<AsyncIterator<SaltedgeCustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaltedgeCustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaltedgeCustomerSubscription>() => T;
}

export interface SaltedgeCustomerEdge {
  node: SaltedgeCustomer;
  cursor: String;
}

export interface SaltedgeCustomerEdgePromise
  extends Promise<SaltedgeCustomerEdge>,
    Fragmentable {
  node: <T = SaltedgeCustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaltedgeCustomerEdgeSubscription
  extends Promise<AsyncIterator<SaltedgeCustomerEdge>>,
    Fragmentable {
  node: <T = SaltedgeCustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaltedgeCustomer {
  count: Int;
}

export interface AggregateSaltedgeCustomerPromise
  extends Promise<AggregateSaltedgeCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaltedgeCustomerSubscription
  extends Promise<AsyncIterator<AggregateSaltedgeCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SaltedgeLoginConnection {
  pageInfo: PageInfo;
  edges: SaltedgeLoginEdge[];
}

export interface SaltedgeLoginConnectionPromise
  extends Promise<SaltedgeLoginConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaltedgeLoginEdge>>() => T;
  aggregate: <T = AggregateSaltedgeLoginPromise>() => T;
}

export interface SaltedgeLoginConnectionSubscription
  extends Promise<AsyncIterator<SaltedgeLoginConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaltedgeLoginEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaltedgeLoginSubscription>() => T;
}

export interface SaltedgeLoginEdge {
  node: SaltedgeLogin;
  cursor: String;
}

export interface SaltedgeLoginEdgePromise
  extends Promise<SaltedgeLoginEdge>,
    Fragmentable {
  node: <T = SaltedgeLoginPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaltedgeLoginEdgeSubscription
  extends Promise<AsyncIterator<SaltedgeLoginEdge>>,
    Fragmentable {
  node: <T = SaltedgeLoginSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaltedgeLogin {
  count: Int;
}

export interface AggregateSaltedgeLoginPromise
  extends Promise<AggregateSaltedgeLogin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaltedgeLoginSubscription
  extends Promise<AsyncIterator<AggregateSaltedgeLogin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SaltedgeAccountSubscriptionPayload {
  mutation: MutationType;
  node: SaltedgeAccount;
  updatedFields: String[];
  previousValues: SaltedgeAccountPreviousValues;
}

export interface SaltedgeAccountSubscriptionPayloadPromise
  extends Promise<SaltedgeAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaltedgeAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaltedgeAccountPreviousValuesPromise>() => T;
}

export interface SaltedgeAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaltedgeAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaltedgeAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaltedgeAccountPreviousValuesSubscription>() => T;
}

export interface SaltedgeAccountPreviousValues {
  id: ID_Output;
  accountId: String;
  balance?: Float;
}

export interface SaltedgeAccountPreviousValuesPromise
  extends Promise<SaltedgeAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountId: () => Promise<String>;
  balance: () => Promise<Float>;
}

export interface SaltedgeAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<SaltedgeAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  accountId: () => Promise<AsyncIterator<String>>;
  balance: () => Promise<AsyncIterator<Float>>;
}

export interface SaltedgeCustomerSubscriptionPayload {
  mutation: MutationType;
  node: SaltedgeCustomer;
  updatedFields: String[];
  previousValues: SaltedgeCustomerPreviousValues;
}

export interface SaltedgeCustomerSubscriptionPayloadPromise
  extends Promise<SaltedgeCustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaltedgeCustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaltedgeCustomerPreviousValuesPromise>() => T;
}

export interface SaltedgeCustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaltedgeCustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaltedgeCustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaltedgeCustomerPreviousValuesSubscription>() => T;
}

export interface SaltedgeCustomerPreviousValues {
  id: ID_Output;
  customerId: String;
}

export interface SaltedgeCustomerPreviousValuesPromise
  extends Promise<SaltedgeCustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customerId: () => Promise<String>;
}

export interface SaltedgeCustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<SaltedgeCustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customerId: () => Promise<AsyncIterator<String>>;
}

export interface SaltedgeLoginSubscriptionPayload {
  mutation: MutationType;
  node: SaltedgeLogin;
  updatedFields: String[];
  previousValues: SaltedgeLoginPreviousValues;
}

export interface SaltedgeLoginSubscriptionPayloadPromise
  extends Promise<SaltedgeLoginSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaltedgeLoginPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaltedgeLoginPreviousValuesPromise>() => T;
}

export interface SaltedgeLoginSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaltedgeLoginSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaltedgeLoginSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaltedgeLoginPreviousValuesSubscription>() => T;
}

export interface SaltedgeLoginPreviousValues {
  id: ID_Output;
  loginId: String;
  provider: String;
}

export interface SaltedgeLoginPreviousValuesPromise
  extends Promise<SaltedgeLoginPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  loginId: () => Promise<String>;
  provider: () => Promise<String>;
}

export interface SaltedgeLoginPreviousValuesSubscription
  extends Promise<AsyncIterator<SaltedgeLoginPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  loginId: () => Promise<AsyncIterator<String>>;
  provider: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  psid: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  psid: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  psid: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "SaltedgeAccount",
    embedded: false
  },
  {
    name: "SaltedgeCustomer",
    embedded: false
  },
  {
    name: "SaltedgeLogin",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
